<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Приложение 1. Пример скрипта на языке Lua</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>



<STYLE type=text/css>

ADDRESS {font-style:normal;  padding-left: 20px; margin: 0px 0px 25pt 5pt; font-size: 9pt; color:#000000; font-style:normal; font-weight: normal; display:list-item; list-style-type:none; list-style-position: outside; list-style-image:url('template/icon-popup.gif');}

ADDRESS P {font-style:normal;  padding-left: 20px; margin: 0px 0px 5pt -15pt; font-size: 9pt; color:#000000; font-style:normal; font-weight: normal; display:list-item; list-style-type:none; list-style-position: outside; list-style-image:url('template/icon-popup.gif');}

MENU { font-size: 12pt; font-family:Verdana;  line-height:100%; margin:0px 0px 0px 20pt; list-style-type:none; list-style-position: outside; list-style-image:url('template/blt-link_black.gif'); }

BODY {font-family: Arial; font-size: 12pt; color:#000000; background-color: #fbfbfb; line-height: 1.3; margin:0pt 5pt 10pt 5pt;}

A {color: #16A9D3;}
P  {font-family:Arial; font-size:12pt; margin-top:0px; margin-bottom:12pt;}

IMG { margin:0pt 0pt 0pt auto; }

UL { font-family: Arial; font-size: 12pt; margin:12px 0px 12px 20px; list-style-type:disc; list-style-image:url('template/blt-li.gif'); } 
OL {font-family: Arial; font-size: 12pt; font-weight: bold; margin-top:12pt; margin-bottom:6pt; margin-left:20pt; type: bold;}
LI { margin-bottom: 8px; }
LI OL { margin-left: 25px; }
LI UL { margin-left: 25px; list-style-image:url('template/blt-link_black.gif'); }

SPAN {font-weight: normal;}

DD OL { font:12pt Verdana; font-style:normal; font-weight: bold; margin-left: 35px; }

H1 { font-size: 28pt; font-family:Verdana; color:#000000; font-style:normal; line-height:110%; margin-top:20pt; margin-bottom:26pt; text-decoration:none; font-weight: bold; margin-right:auto; margin-left:auto;}
H2 { font-size: 20pt; font-family:Verdana; color:#000000; font-style:normal; line-height:110%; margin-top:20pt; margin-bottom:6pt; text-decoration:none; font-weight: bold; margin-left:auto; padding: 0.5ex 0; }
H3 { font-size: 14pt; font-family:Verdana; color:#000000; font-style:normal; line-height:95%; margin-top:20pt; margin-bottom:6pt; margin-left: auto;}
H4 { font-size: 11pt; font-family:Verdana; color:#000000; font-style:normal; line-height:95%; margin-top:16pt; margin-bottom:6pt; margin-left: auto;}

TABLE { border-collapse: collapse; margin-bottom:20pt; }
TH { font-size: 10pt; border-top: none; border-bottom:#000000 3px solid; padding:15pt 5pt 5px 0px; color:#000000; font-family:Verdana; font-style:normal; font-weight: bold; text-align:left; }
TD { font-size:10pt; border-top: 0pt; font-family:Arial; border-bottom:#000000 1px solid; padding:4pt 5px 12pt 0px;  line-height:120%; }
TD P {font-family: Arial; font-size: 10pt; margin-top:6pt;}
TD.plain 	{margin:0px 0px 0px 0px; border-top: 0px; border-bottom:0px; padding:0px 0px 0px 0px; font-size:100%; line-height:100%;}
TD.array	{ border: 1px solid #D4D4D4; text-align: center; width: 90px;}
TD.pic	{ padding:0px 0px 0px 0px; }
TD.line1          { background-color:#000000; }
TD.line2          { background-color:#000000; }
TD UL {font-family: Arial; font-size: 10pt; margin:0px 0px 0px 20px; line-height:120%;}
TD UL LI {font-family: Arial; font-size: 10pt; margin-bottom: 0px; list-style-image:url('template/blt-link_black.gif');}

TD H4	{line-height: 100%; margin-top: 8px; margin-bottom: 0px;}

DL	{ padding-left:35px; margin-left: 30px; margin-bottom: 35px;}
DD	{ padding-left:8px; color:#000000; margin: 8px 8px 8px 0px; font:12pt Verdana; font-style:normal; font-weight: bold; border-left: #000000 4px solid; margin-bottom:18pt; }
DD P	{font:12pt Verdana; font-style:normal; font-weight: bold; }

PRE	{ background-color:#F2F2F2; margin-left: 35px; margin-bottom: 20px; border-style:none; border-top-style: none; border-bottom-style: none; padding:8px 8px 8px 8px; font: 10pt Courier New; line-height:160%;}

.title {display: inline; background:#FbFbFb; margin-left: 0px; border-style:solid; border-color:#D4D4D4; border-width: 1px 1px 0px 4px; padding:8px 8px 6px 12px; color:#19A788; font-weight:bold;}
.hlt { background:#FFFFFF; margin-left: 0px; border-style:solid; border-color:#D4D4D4; border-width: 1px 2px 1px 4px; padding:15px 8px 15px 46px;}

STRONG { font-weight: bold;}
.logo	{ position: relative; top:-45px; float: right; width: 100px; margin:10px 10px 10px 10px; }
.mark	{ font: 10pt Verdana; color: #5EB28E; }
.defn	{ font: 15px Trebuchet MS; margin:12px 0px 12px 50px; }
.copyright {font: 12pt Trebuchet MS; font-style:normal; color:#A2A2A2; margin-top: 50px;}
.comment	{ font-size: 10pt; font-family: Verdana; }
</STYLE>

<meta name=GENERATOR content="MSHTML 8.00.6001.18812"></head>

<body aLink=#19a788 link=#007cae vLink=#8d4194>
<H1 style="MARGIN-TOP: 10pt">Приложение 1. Пример скрипта на языке Lua</H1>
<P><FONT size=2 face=Arial>
<P>В данном приложении приведен пример скрипта на языке Lua 
для создания таблицы в Рабочем месте QUIK.<BR><STRONG><EM></EM></STRONG>           </P>


<P><STRONG><EM>Файл table_object.lua:<BR>           </P></EM></STRONG>

<PRE>dofile (getScriptPath() .. <span style="color: #a31515">&quot;\\quik_table_wrapper.lua&quot;</span>)
dofile (getScriptPath() .. <span style="color: #a31515">&quot;\\ntime.lua&quot;</span>)
stopped = <span style="color: #0000ff">false</span>
<span style="color: #0000ff">function</span> format1(data)
	<span style="color: #0000ff">return</span> string.format(<span style="color: #a31515">&quot;0x%08X&quot;</span>, data)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> format2(data)
	<span style="color: #0000ff">return</span> string.format(<span style="color: #a31515">&quot;%06d&quot;</span>, data)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> OnStop(s)
	stopped = <span style="color: #0000ff">true</span>
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> main()
	<span style="color: #008000">-- поворачивающиеся «палочки» в заголовке таблицы</span>
	<span style="color: #0000ff">local</span> palochki = {<span style="color: #a31515">&quot;-&quot;</span>,<span style="color: #a31515">&quot;\\&quot;</span>, <span style="color: #a31515">&quot;|&quot;</span>, <span style="color: #a31515">&quot;/&quot;</span>}
	<span style="color: #008000">-- создать экземпляр QTable</span>
	t = QTable.new()
	<span style="color: #0000ff">if</span> <span style="color: #0000ff">not</span> t <span style="color: #0000ff">then</span>
		message(<span style="color: #a31515">&quot;error!&quot;</span>, 3)
		<span style="color: #0000ff">return</span>
	<span style="color: #0000ff">else</span>
		message(<span style="color: #a31515">&quot;table with id = &quot;</span> ..t.t_id .. <span style="color: #a31515">&quot; created&quot;</span>, 1)
	<span style="color: #0000ff">end</span>

	<span style="color: #008000">-- добавить два столбца с функциями форматирования</span>
	<span style="color: #008000">-- в первом столбце – hex-значения, во втором – целые числа</span>
	t:AddColumn(<span style="color: #a31515">&quot;test1&quot;</span>, QTABLE_INT_TYPE, 10,format1)
	t:AddColumn(<span style="color: #a31515">&quot;test2&quot;</span>, QTABLE_INT_TYPE, 10, format2)
	<span style="color: #008000">-- добавить столбцы без форматирования</span>
	t:AddColumn(<span style="color: #a31515">&quot;test3&quot;</span>, QTABLE_CACHED_STRING_TYPE, 50)
	t:AddColumn(<span style="color: #a31515">&quot;test4&quot;</span>, QTABLE_TIME_TYPE, 50)
	t:AddColumn(<span style="color: #a31515">&quot;test5&quot;</span>, QTABLE_CACHED_STRING_TYPE, 50)
	
	t:SetCaption(<span style="color: #a31515">&quot;Test&quot;</span>)
	t:Show()
	i=1
	<span style="color: #008000">-- исполнять цикл, пока пользователь не остановит скрипт из диалога управления</span>
	<span style="color: #0000ff">while</span> <span style="color: #0000ff">not</span> stopped <span style="color: #0000ff">do</span> 
		<span style="color: #008000">-- если таблица закрыта, то показать ее заново</span>
		<span style="color: #008000">-- при этом все предыдущие данные очищаются</span>
		<span style="color: #0000ff">if</span> t:IsClosed() <span style="color: #0000ff">then</span>
			t:Show()
		<span style="color: #0000ff">end</span>
		<span style="color: #008000">-- на каждой итерации повернуть «палочку» на 45 градусов</span>
		t:SetCaption(<span style="color: #a31515">&quot;QLUA TABLE TEST &quot;</span> .. palochki[i%4 +1])
		<span style="color: #008000">-- метод добавит в таблицу новую строчку и вернет ее номер</span>
		<span style="color: #0000ff">local</span> row = t:AddLine()
		t:SetValue(row, <span style="color: #a31515">&quot;test1&quot;</span>, row, i)
		t:SetValue(row, <span style="color: #a31515">&quot;test2&quot;</span>, row, i)

		<span style="color: #008000">-- заполнить ячейку текущим заголовком таблицы</span>
		<span style="color: #008000">-- тип столбца – строковый, поэтому последний параметр пропускается</span>
		SetCell(t.t_id, row, 3, GetWindowCaption(t.t_id))
		
		_date = os.date(<span style="color: #a31515">&quot;*t&quot;</span>)
		<span style="color: #008000">-- 4-й столбец заполнить данными типа время (число в формате &lt;ЧЧММСС&gt;)</span>
		<span style="color: #008000">-- Функция для строкового представления времени определена в файле ntime.lua</span>
		<span style="color: #008000">-- Функция NiceTime возвращает строку</span>
		SetCell(t.t_id, row, 4, 
		NiceTime(_date) .. string.format(<span style="color: #a31515">&quot; (%02d:%02d:%02d)&quot;</span>, _date.hour, _date.min, _date.sec),
		_date.hour*10000+_date.min*100 +_date.sec)
		<span style="color: #008000">-- пятый столбец имеет строковый тип и заполняется результатом выполнения функции NiceTime</span>
		<span style="color: #008000">-- исходный код функции взят из виджета Conky Lua для Ubuntu</span>
		SetCell(t.t_id, row, 5, NiceTime(_date))
		sleep(1000)
		i=i+1
	<span style="color: #0000ff">end</span>
	message(<span style="color: #a31515">&quot;finished&quot;</span>)
<span style="color: #0000ff">end</span>
</PRE>


<P><STRONG><EM>Файл quik_table_wrapper.lua:</EM></STRONG> </P>    
                     
<PRE><span style="color: #008000">-- Перегрузка функции message с необязательным вторым параметром</span>
old_message = message
<span style="color: #0000ff">function</span> message(v, i)
	old_message(tostring(v), i <span style="color: #0000ff">or</span> 1)
<span style="color: #0000ff">end</span>


QTable ={}
QTable.__index = QTable

<span style="color: #008000">-- Создать и инициализировать экземпляр таблицы QTable</span>
<span style="color: #0000ff">function</span> <span style="color: #2b91af">QTable</span>.new()
	<span style="color: #0000ff">local</span> t_id = AllocTable()
	<span style="color: #0000ff">if</span> t_id ~= <span style="color: #0000ff">nil</span> <span style="color: #0000ff">then</span>
		q_table = {}
		setmetatable(q_table, QTable)
		q_table.t_id=t_id
		q_table.caption = <span style="color: #a31515">&quot;&quot;</span>
		q_table.created = <span style="color: #0000ff">false</span>
		q_table.curr_col=0
		<span style="color: #008000">-- таблица с описанием параметров столбцов</span>
		q_table.columns={}
		<span style="color: #0000ff">return</span> q_table
	<span style="color: #0000ff">else</span>
		<span style="color: #0000ff">return</span> <span style="color: #0000ff">nil</span>
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:Show()
	<span style="color: #008000">-- отобразить в терминале окно с созданной таблицей</span>
	CreateWindow(self.t_id)
	<span style="color: #0000ff">if</span> self.caption ~=<span style="color: #a31515">&quot;&quot;</span> <span style="color: #0000ff">then</span>
		<span style="color: #008000">-- задать заголовок для окна</span>
		SetWindowCaption(self.t_id, self.caption)
	<span style="color: #0000ff">end</span>
	self.created = <span style="color: #0000ff">true</span>
<span style="color: #0000ff">end</span>
<span style="color: #0000ff">function</span> QTable:IsClosed()
	<span style="color: #008000">-- если окно с таблицей закрыто, возвращает «true»</span>
	<span style="color: #0000ff">return</span> IsWindowClosed(self.t_id)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:delete()
	<span style="color: #008000">-- удалить таблицу</span>
	DestroyTable(self.t_id)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:GetCaption()
	<span style="color: #0000ff">if</span> IsWindowClosed(self.t_id) <span style="color: #0000ff">then</span>
		<span style="color: #0000ff">return</span> self.caption
	<span style="color: #0000ff">else</span>
		<span style="color: #008000">-- возвращает строку, содержащую заголовок таблицы</span>
		<span style="color: #0000ff">return</span> GetWindowCaption(self.t_id)
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Задать заголовок таблицы</span>
<span style="color: #0000ff">function</span> QTable:SetCaption(s)
	self.caption = s
	<span style="color: #0000ff">if</span> <span style="color: #0000ff">not</span> IsWindowClosed(self.t_id) <span style="color: #0000ff">then</span>
		res = SetWindowCaption(self.t_id, tostring(s))
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Добавить описание столбца &lt;name&gt; типа &lt;c_type&gt; в таблицу</span>
<span style="color: #008000">-- &lt;ff&gt; – функция форматирования данных для отображения</span>
<span style="color: #0000ff">function</span> QTable:AddColumn(name, c_type, width, ff )
	<span style="color: #0000ff">local</span> col_desc={}
	self.curr_col=self.curr_col+1
	col_desc.c_type = c_type
	col_desc.format_function = ff
	col_desc.id = self.curr_col
	self.columns[name] = col_desc
	<span style="color: #008000">-- &lt;name&gt; используется в качестве заголовка таблицы</span>
	AddColumn(self.t_id, self.curr_col, name, <span style="color: #0000ff">true</span>, c_type, width)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:Clear()
	<span style="color: #008000">-- очистить таблицу</span>
	Clear(self.t_id)
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Установить значение в ячейке</span>
<span style="color: #0000ff">function</span> QTable:SetValue(row, col_name, data)
	<span style="color: #0000ff">local</span> col_ind = self.columns[col_name].id <span style="color: #0000ff">or</span> <span style="color: #0000ff">nil</span>
	<span style="color: #0000ff">if</span> col_ind == <span style="color: #0000ff">nil</span> <span style="color: #0000ff">then</span>
		<span style="color: #0000ff">return</span> <span style="color: #0000ff">false</span>
	<span style="color: #0000ff">end</span>
	<span style="color: #008000">-- если для столбца задана функция форматирования, то она используется</span>
	<span style="color: #0000ff">local</span> ff = self.columns[col_name].format_function
	
	<span style="color: #0000ff">if</span> type(ff) == <span style="color: #a31515">&quot;function&quot;</span> <span style="color: #0000ff">then</span>
		<span style="color: #008000">-- в качестве строкового представления используется</span>
		<span style="color: #008000">-- результат выполнения функции форматирования</span>
		SetCell(self.t_id, row, col_ind, ff(data), data)
		<span style="color: #0000ff">return</span> <span style="color: #0000ff">true</span>
	<span style="color: #0000ff">else</span>
		SetCell(self.t_id, row, col_ind, tostring(data), data)
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:AddLine()
	<span style="color: #008000">-- добавляет в конец таблицы пустую строчку и возвращает ее номер</span>
	<span style="color: #0000ff">return</span> InsertRow(self.t_id, -1)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> QTable:GetSize()
	<span style="color: #008000">-- возвращает размер таблицы</span>
	<span style="color: #0000ff">return</span> GetTableSize(self.t_id)
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Получить данные из ячейки по номеру строки и имени столбца</span>
<span style="color: #0000ff">function</span> QTable:GetValue(row, name)
	<span style="color: #0000ff">local</span> t={}
	<span style="color: #0000ff">local</span> col_ind = self.columns[name].id
	<span style="color: #0000ff">if</span> col_ind == <span style="color: #0000ff">nil</span> <span style="color: #0000ff">then</span>
		<span style="color: #0000ff">return</span> <span style="color: #0000ff">nil</span>
	<span style="color: #0000ff">end</span>
	t = GetCell(self.t_id, row, col_ind)
	<span style="color: #0000ff">return</span> t
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Задать координаты окна</span>
<span style="color: #0000ff">function</span> QTable:SetPosition(x, y, dx, dy)
	<span style="color: #0000ff">return</span> SetWindowPos(self.t_id, x, y, dx, dy)
<span style="color: #0000ff">end</span>

<span style="color: #008000">-- Функция возвращает координаты окна</span>
<span style="color: #0000ff">function</span> QTable:GetPosition()
	top, left, bottom, right = GetWindowRect(self.t_id)
	<span style="color: #0000ff">return</span> top, left, right-left, bottom-top
<span style="color: #0000ff">end</span>
</PRE>


<P><STRONG><EM>Файл ntime.lua:<BR></EM></STRONG> </P>

<PRE>words = {<span style="color: #a31515">&quot;one &quot;</span>, <span style="color: #a31515">&quot;two &quot;</span>, <span style="color: #a31515">&quot;three &quot;</span>, <span style="color: #a31515">&quot;four &quot;</span>, <span style="color: #a31515">&quot;five &quot;</span>, <span style="color: #a31515">&quot;six &quot;</span>, <span style="color: #a31515">&quot;seven &quot;</span>, <span style="color: #a31515">&quot;eight &quot;</span>, <span style="color: #a31515">&quot;nine &quot;</span>}
levels = {<span style="color: #a31515">&quot;thousand &quot;</span>, <span style="color: #a31515">&quot;million &quot;</span>, <span style="color: #a31515">&quot;billion &quot;</span>, <span style="color: #a31515">&quot;trillion &quot;</span>, <span style="color: #a31515">&quot;quadrillion &quot;</span>, <span style="color: #a31515">&quot;quintillion &quot;</span>, <span style="color: #a31515">&quot;sextillion &quot;</span>, <span style="color: #a31515">&quot;septillion &quot;</span>, <span style="color: #a31515">&quot;octillion &quot;</span>, [0] = <span style="color: #a31515">&quot;&quot;</span>}
iwords = {<span style="color: #a31515">&quot;ten &quot;</span>, <span style="color: #a31515">&quot;twenty &quot;</span>, <span style="color: #a31515">&quot;thirty &quot;</span>, <span style="color: #a31515">&quot;forty &quot;</span>, <span style="color: #a31515">&quot;fifty &quot;</span>, <span style="color: #a31515">&quot;sixty &quot;</span>, <span style="color: #a31515">&quot;seventy &quot;</span>, <span style="color: #a31515">&quot;eighty &quot;</span>, <span style="color: #a31515">&quot;ninety &quot;</span>}
twords = {<span style="color: #a31515">&quot;eleven &quot;</span>, <span style="color: #a31515">&quot;twelve &quot;</span>, <span style="color: #a31515">&quot;thirteen &quot;</span>, <span style="color: #a31515">&quot;fourteen &quot;</span>, <span style="color: #a31515">&quot;fifteen &quot;</span>, <span style="color: #a31515">&quot;sixteen &quot;</span>, <span style="color: #a31515">&quot;seventeen &quot;</span>, <span style="color: #a31515">&quot;eighteen &quot;</span>, <span style="color: #a31515">&quot;nineteen &quot;</span>}

<span style="color: #0000ff">function</span> digits(n)
	<span style="color: #0000ff">local</span> i, ret = -1
	<span style="color: #0000ff">return</span> <span style="color: #0000ff">function</span>()
	i, ret = i + 1, n % 10
	<span style="color: #0000ff">if</span> n &gt; 0 <span style="color: #0000ff">then</span>
	n = math.floor(n / 10)
	<span style="color: #0000ff">return</span> i, ret
	<span style="color: #0000ff">end</span>
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

level = <span style="color: #0000ff">false</span>
<span style="color: #0000ff">function</span> getname(pos, dig)
	level = level <span style="color: #0000ff">or</span> pos % 3 == 0
	<span style="color: #0000ff">if</span>(dig == 0) <span style="color: #0000ff">then</span> <span style="color: #0000ff">return</span> <span style="color: #a31515">&quot;&quot;</span> <span style="color: #0000ff">end</span>
	<span style="color: #0000ff">local</span> name = (pos % 3 == 1 <span style="color: #0000ff">and</span> iwords[dig] <span style="color: #0000ff">or</span> words[dig]) .. (pos % 3 == 2 <span style="color: #0000ff">and</span> <span style="color: #a31515">&quot;hundred &quot;</span> <span style="color: #0000ff">or</span> <span style="color: #a31515">&quot;&quot;</span>)
	<span style="color: #0000ff">if</span>(level) <span style="color: #0000ff">then</span> name, level = name .. levels[math.floor(pos / 3)], <span style="color: #0000ff">false</span> <span style="color: #0000ff">end</span>
	<span style="color: #0000ff">return</span> name
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> numberToWord(number)
	<span style="color: #0000ff">if</span>(number == 0) <span style="color: #0000ff">then</span> <span style="color: #0000ff">return</span> <span style="color: #a31515">&quot;zero&quot;</span> <span style="color: #0000ff">end</span>
	vword = <span style="color: #a31515">&quot;&quot;</span>
	<span style="color: #0000ff">for</span> i, v <span style="color: #0000ff">in</span> digits(number) <span style="color: #0000ff">do</span>
	vword = getname(i, v) .. vword
	<span style="color: #0000ff">end</span>

	<span style="color: #0000ff">for</span> i, v <span style="color: #0000ff">in</span> ipairs(words) <span style="color: #0000ff">do</span>
	vword = vword:gsub(<span style="color: #a31515">&quot;ty &quot;</span> .. v, <span style="color: #a31515">&quot;ty-&quot;</span> .. v)
	vword = vword:gsub(<span style="color: #a31515">&quot;ten &quot;</span> .. v, twords[i])
	<span style="color: #0000ff">end</span>
	<span style="color: #0000ff">return</span> vword
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> _Time(t)
	hour = t.hour
	minute = t.min
	hour = hour % 12
	<span style="color: #0000ff">if</span>(hour == 0) <span style="color: #0000ff">then</span> 
	hour, nextHourWord = 12, <span style="color: #a31515">&quot;one &quot;</span>
	<span style="color: #0000ff">else</span>
	nextHourWord = numberToWord(hour+1)
	<span style="color: #0000ff">end</span>
	hourWord = numberToWord(hour)
	<span style="color: #0000ff">if</span>(minute == 0 ) <span style="color: #0000ff">then</span> 
	<span style="color: #0000ff">return</span> hourWord .. <span style="color: #a31515">&quot;o&#39;clock&quot;</span>
	<span style="color: #0000ff">elseif</span>(minute == 30) <span style="color: #0000ff">then</span>
	<span style="color: #0000ff">return</span> <span style="color: #a31515">&quot;half past &quot;</span> .. hourWord
	<span style="color: #0000ff">elseif</span>(minute == 15) <span style="color: #0000ff">then</span>
	<span style="color: #0000ff">return</span> <span style="color: #a31515">&quot;a quarter past &quot;</span> .. hourWord 
	<span style="color: #0000ff">elseif</span>(minute == 45) <span style="color: #0000ff">then</span>
	<span style="color: #0000ff">return</span> <span style="color: #a31515">&quot;a quarter to &quot;</span> .. nextHourWord 
	<span style="color: #0000ff">else</span>
	<span style="color: #0000ff">if</span>(minute &lt; 30) <span style="color: #0000ff">then</span>
	<span style="color: #0000ff">return</span> numberToWord(minute) .. <span style="color: #a31515">&quot;past &quot;</span> .. hourWord
	<span style="color: #0000ff">else</span>
	<span style="color: #0000ff">return</span> numberToWord(60-minute) .. <span style="color: #a31515">&quot;to &quot;</span> .. nextHourWord
	<span style="color: #0000ff">end</span>
	<span style="color: #0000ff">end</span>
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> _Seconds(s)
	<span style="color: #0000ff">return</span> numberToWord(s)
<span style="color: #0000ff">end</span>

<span style="color: #0000ff">function</span> NiceTime(t)
	<span style="color: #0000ff">return</span> _Time(t) ..<span style="color: #a31515">&quot;and &quot;</span>.. _Seconds(t.sec) .. <span style="color: #a31515">&quot;second&quot;</span>
<span style="color: #0000ff">end</span>
</PRE>

<P>В результате выполнения скрипта в Рабочем месте QUIK создается таблица вида: </P>
<P>&nbsp;<IMG alt="" src="app1.gif"></P>

</FONT></P>

<P><DIV class=copyright>Руководство пользователя QUIK © ARQA Technologies / <A 
href="http://www.arqatech.com/ru/products/quik/">www.arqatech.com/ru/products/quik/</A></DIV>
</body>
